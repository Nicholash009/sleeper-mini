diff --git a/node_modules/react-native/Libraries/BatchedBridge/NativeModules.js b/node_modules/react-native/Libraries/BatchedBridge/NativeModules.js
index 26961d7..8649cca 100644
--- a/node_modules/react-native/Libraries/BatchedBridge/NativeModules.js
+++ b/node_modules/react-native/Libraries/BatchedBridge/NativeModules.js
@@ -175,7 +175,16 @@ function updateErrorWithErrorData(
 }
 
 let NativeModules: {[moduleName: string]: $FlowFixMe, ...} = {};
+global.disabledNativeModules = {};
 if (global.nativeModuleProxy) {
+  global.nativeModuleProxy = new Proxy(global.nativeModuleProxy, {
+    get: function(target, name) {
+      if (global.disabledNativeModules?.[name]) {
+        return {};
+      }
+      return target[name];
+    },
+  });
   NativeModules = global.nativeModuleProxy;
 } else if (!global.nativeExtensions) {
   const bridgeConfig = global.__fbBatchedBridgeConfig;
diff --git a/node_modules/react-native/Libraries/Core/Devtools/symbolicateStackTrace.js b/node_modules/react-native/Libraries/Core/Devtools/symbolicateStackTrace.js
index b45bc36..3835539 100644
--- a/node_modules/react-native/Libraries/Core/Devtools/symbolicateStackTrace.js
+++ b/node_modules/react-native/Libraries/Core/Devtools/symbolicateStackTrace.js
@@ -37,9 +37,14 @@ async function symbolicateStackTrace(
     throw new Error('Bundle was not loaded from Metro.');
   }
 
+  let platform = 'android';
+  if (devServer.fullBundleUrl.includes("platform=ios")) {
+    platform = 'ios';
+  }
+
   // Lazy-load `fetch` until the first symbolication call to avoid circular requires.
   const fetch = global.fetch ?? require('../../Network/fetch');
-  const response = await fetch(devServer.url + 'symbolicate', {
+  const response = await fetch(devServer.url + `symbolicate?platform=${platform}`, {
     method: 'POST',
     body: JSON.stringify({stack}),
   });
diff --git a/node_modules/react-native/Libraries/Core/setUpDeveloperTools.js b/node_modules/react-native/Libraries/Core/setUpDeveloperTools.js
index 4247d3b..a5bd828 100644
--- a/node_modules/react-native/Libraries/Core/setUpDeveloperTools.js
+++ b/node_modules/react-native/Libraries/Core/setUpDeveloperTools.js
@@ -73,5 +73,5 @@ if (__DEV__) {
     }
   }
 
-  require('./setUpReactRefresh');
+  // require('./setUpReactRefresh');
 }
diff --git a/node_modules/react-native/React/.DS_Store b/node_modules/react-native/React/.DS_Store
new file mode 100644
index 0000000..84d697a
Binary files /dev/null and b/node_modules/react-native/React/.DS_Store differ
diff --git a/node_modules/react-native/React/Base/RCTDefines.h b/node_modules/react-native/React/Base/RCTDefines.h
index 68fa842..2191c76 100644
--- a/node_modules/react-native/React/Base/RCTDefines.h
+++ b/node_modules/react-native/React/Base/RCTDefines.h
@@ -139,7 +139,7 @@
  * Add the default packager name
  */
 #ifndef RCT_PACKAGER_NAME
-#define RCT_PACKAGER_NAME @"Metro"
+#define RCT_PACKAGER_NAME @"Webpack"
 #endif
 
 /**
diff --git a/node_modules/react-native/scripts/packager.sh b/node_modules/react-native/scripts/packager.sh
index cb8b101..1342890 100755
--- a/node_modules/react-native/scripts/packager.sh
+++ b/node_modules/react-native/scripts/packager.sh
@@ -21,4 +21,4 @@ then
 fi
 # Start packager from PROJECT_ROOT
 cd "$PROJECT_ROOT" || exit
-"$NODE_BINARY" "$REACT_NATIVE_ROOT/cli.js" start --custom-log-reporter-path "$THIS_DIR/packager-reporter.js" "$@"
+"$NODE_BINARY" "$REACT_NATIVE_ROOT/cli.js" webpack-start --custom-log-reporter-path "$THIS_DIR/packager-reporter.js" "$@"
diff --git a/node_modules/react-native/scripts/react-native-xcode.sh b/node_modules/react-native/scripts/react-native-xcode.sh
index e6fc8d1..23d40c6 100755
--- a/node_modules/react-native/scripts/react-native-xcode.sh
+++ b/node_modules/react-native/scripts/react-native-xcode.sh
@@ -34,15 +34,11 @@ fi
 
 case "$CONFIGURATION" in
   *Debug*)
-    if [[ "$PLATFORM_NAME" == *simulator ]]; then
-      if [[ "$FORCE_BUNDLING" ]]; then
-        echo "FORCE_BUNDLING enabled; continuing to bundle."
-      else
-        echo "Skipping bundling in Debug for the Simulator (since the packager bundles for you). Use the FORCE_BUNDLING flag to change this behavior."
-        exit 0;
-      fi
+    if [[ "$FORCE_BUNDLING" ]]; then
+      echo "FORCE_BUNDLING enabled; continuing to bundle."
     else
-      echo "Bundling for physical device. Use the SKIP_BUNDLING flag to change this behavior."
+      echo "Skipping bundling in Debug (since the packager bundles for you). Use the FORCE_BUNDLING flag to change this behavior."
+      exit 0;
     fi
 
     DEV=true
@@ -115,7 +111,7 @@ else
   CONFIG_ARG="--config $BUNDLE_CONFIG"
 fi
 
-BUNDLE_FILE="$CONFIGURATION_BUILD_DIR/main.jsbundle"
+BUNDLE_FILE="$CONFIGURATION_BUILD_DIR/index.ios.bundle"
 
 EXTRA_ARGS=
 
@@ -165,7 +161,7 @@ fi
 
 if [[ $USE_HERMES == false ]]; then
   cp "$BUNDLE_FILE" "$DEST/"
-  BUNDLE_FILE="$DEST/main.jsbundle"
+  BUNDLE_FILE="$DEST/index.ios.bundle"
 else
   EXTRA_COMPILER_ARGS=
   if [[ $DEV == true ]]; then
@@ -176,14 +172,14 @@ else
   if [[ $EMIT_SOURCEMAP == true ]]; then
     EXTRA_COMPILER_ARGS="$EXTRA_COMPILER_ARGS -output-source-map"
   fi
-  "$HERMES_CLI_PATH" -emit-binary -max-diagnostic-width=80 $EXTRA_COMPILER_ARGS -out "$DEST/main.jsbundle" "$BUNDLE_FILE"
+  "$HERMES_CLI_PATH" -emit-binary -max-diagnostic-width=80 $EXTRA_COMPILER_ARGS -out "$DEST/index.ios.bundle" "$BUNDLE_FILE"
   if [[ $EMIT_SOURCEMAP == true ]]; then
-    HBC_SOURCEMAP_FILE="$DEST/main.jsbundle.map"
+    HBC_SOURCEMAP_FILE="$DEST/index.ios.bundle.map"
     "$NODE_BINARY" "$COMPOSE_SOURCEMAP_PATH" "$PACKAGER_SOURCEMAP_FILE" "$HBC_SOURCEMAP_FILE" -o "$SOURCEMAP_FILE"
     rm "$HBC_SOURCEMAP_FILE"
     rm "$PACKAGER_SOURCEMAP_FILE"
   fi
-  BUNDLE_FILE="$DEST/main.jsbundle"
+  BUNDLE_FILE="$DEST/index.ios.bundle"
 fi
 
 if [[ $DEV != true && ! -f "$BUNDLE_FILE" ]]; then